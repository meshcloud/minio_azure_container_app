{
    # Global options
    order coraza_waf first
}

# --- WAF for MinIO UI (port 8080) ---
:8080 {
    handle /health {
        respond "WAF-UI-OK" 200
    }

    route {
        coraza_waf {
            load_owasp_crs

            directives `
                # Step 1: Initialize TX collection
                SecAction "id:1,phase:1,pass,nolog,initcol:tx=tx"

                # Step 2: Initialize TX variable
                SecAction "id:2,phase:1,pass,nolog,setvar:tx.bucket_ops=0"

                # Allow WebSocket connections for MinIO console
                SecRule REQUEST_HEADERS:Upgrade "@streq websocket" "id:1001,phase:1,pass,msg:'Allow WebSocket upgrade requests'"

                # Block DELETE on /minio/admin (except WebSocket connections)
                SecRule REQUEST_URI "@beginsWith /minio/admin" "id:1002,phase:1,deny,status:403,msg:'MinIO Admin API Access Blocked',chain"
                SecRule REQUEST_HEADERS:Upgrade "!@streq websocket"

                # Rate limiting
                SecRule REQUEST_METHOD "@rx ^(PUT|POST|DELETE)$" "id:1003,phase:1,pass,msg:'Bucket operation',setvar:tx.bucket_ops=+1,expirevar:tx.bucket_ops=60"
                SecRule TX:bucket_ops "@gt 50" "id:1004,phase:1,deny,status:429,msg:'Bucket operation rate limit exceeded'"
            `
        }

        reverse_proxy localhost:9001 {
            header_up Host {http.request.host}
            header_up X-Real-IP {remote}
            header_up X-Forwarded-For {remote}
            header_up X-Forwarded-Proto {scheme}

            header_up Connection {http.request.header.connection}
            header_up Upgrade {http.request.header.upgrade}
            header_up Sec-WebSocket-Key {http.request.header.sec-websocket-key}
            header_up Sec-WebSocket-Version {http.request.header.sec-websocket-version}
            transport http {
                read_timeout 300s
                dial_timeout 300s
            }
        }
    }

    log {
        output stdout
        format json
        level INFO
    }
}

# --- WAF for MinIO API (port 8081) ---
:8081 {
    handle /health {
        respond "WAF-API-OK" 200
    }

    route {
        coraza_waf {
            load_owasp_crs

            directives `
                # Step 1: Initialize TX collection
                SecAction "id:10,phase:1,pass,nolog,initcol:tx=tx"

                # Step 2: Initialize TX variable
                SecAction "id:11,phase:1,pass,nolog,setvar:tx.bucket_ops=0"

                # Log DELETE operations
                SecRule REQUEST_METHOD "@streq DELETE" "id:2001,phase:1,log,msg:'DELETE operation logged'"

                # Rate limiting
                SecRule REQUEST_METHOD "@rx ^(PUT|POST|DELETE)$" "id:2002,phase:1,pass,msg:'Bucket operation',setvar:tx.bucket_ops=+1,expirevar:tx.bucket_ops=60"
                SecRule TX:bucket_ops "@gt 50" "id:2003,phase:1,deny,status:429,msg:'Bucket operation rate limit exceeded'"
            `
        }

        reverse_proxy localhost:9000 {
            header_up Host {http.request.host}
            header_up X-Real-IP {remote}
            header_up X-Forwarded-For {remote}
            header_up X-Forwarded-Proto {scheme}

            header_up Connection {http.request.header.connection}
            header_up Upgrade {http.request.header.upgrade}
            header_up Sec-WebSocket-Key {http.request.header.sec-websocket-key}
            header_up Sec-WebSocket-Version {http.request.header.sec-websocket-version}


            transport http {
                read_timeout 300s
                dial_timeout 300s
            }

        }
    }

    log {
        output stdout
        format json
        level INFO
    }
}
